# Configuración para HTTP (desarrollo y pruebas locales)
server {
    listen 80;
    server_name _;
    root /var/www/html/public;
    index index.php index.html;

    # Configuración específica para SPA (Inertia.js)
    # Tamaños de buffer optimizados para SPAs
    client_max_body_size 100M;
    client_body_buffer_size 1m;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    
    # Timeouts optimizados
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    keepalive_timeout 65s;
    
    # Laravel/Inertia specific locations
    location / {
        # Importante para SPAs: siempre servir index.php para rutas no encontradas
        try_files $uri $uri/ /index.php?$query_string;
        
        # Headers para SPA
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

    # Handle PHP files con buffers optimizados para SPA
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
        
        # Buffers FastCGI optimizados para respuestas grandes (JSON para SPA)
        fastcgi_buffer_size 32k;
        fastcgi_buffers 16 32k;
        fastcgi_busy_buffers_size 64k;
        fastcgi_temp_file_write_size 64k;
        
        # Timeouts FastCGI
        fastcgi_connect_timeout 60s;
        fastcgi_send_timeout 300s;
        fastcgi_read_timeout 300s;
        
        # Headers importantes para Inertia.js
        fastcgi_param HTTP_X_REQUESTED_WITH $http_x_requested_with;
        fastcgi_param HTTP_X_INERTIA $http_x_inertia;
        fastcgi_param HTTP_X_INERTIA_VERSION $http_x_inertia_version;
        
        # Security
        fastcgi_param HTTP_PROXY "";
        
        # CORS para APIs si es necesario
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Content-Type, X-CSRF-Token, X-Requested-With, X-Inertia, X-Inertia-Version" always;
        add_header Access-Control-Allow-Credentials true always;
        
        # Responder a preflight requests
        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # Static assets with long cache - importante para SPA assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        try_files $uri =404;
        
        # Gzip para assets
        gzip_static on;
        gzip_vary on;
    }
    
    # Manifests y service workers (no cache)
    location ~* \.(manifest\.json|sw\.js)$ {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        try_files $uri =404;
    }
    
    # Build assets de Vite
    location /build/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
        
        gzip_static on;
    }

    # API rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Login rate limiting
    location /login {
        limit_req zone=login burst=5 nodelay;
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Security - deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /(vendor|storage|bootstrap/cache|config|database|lang|resources|routes|tests)/ {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~* \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS configuration (para producción con SSL)
# Descomenta y configura cuando tengas certificados SSL
# server {
#     listen 443 ssl http2;
#     server_name tu-dominio.com;
#     root /var/www/html/public;
#     index index.php index.html;
#
#     # SSL certificates
#     ssl_certificate /etc/ssl/certs/your-cert.pem;
#     ssl_certificate_key /etc/ssl/private/your-key.pem;
#
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # Same location blocks as HTTP version...
# }

# Redirect HTTP to HTTPS in production
# server {
#     listen 80;
#     server_name tu-dominio.com;
#     return 301 https://$server_name$request_uri;
# }
